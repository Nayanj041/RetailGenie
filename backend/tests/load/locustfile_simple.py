"""
Load testing for RetailGenie using Locust.
Simple load testing without complex dependencies.
"""

from locust import HttpUser, task, between
import json
import random


class RetailGenieUser(HttpUser):
    """Simulate a RetailGenie user for load testing."""
    
    wait_time = between(1, 3)  # Wait 1-3 seconds between requests
    
    def on_start(self):
        """Called when a user starts."""
        self.client.verify = False  # Disable SSL verification for testing
        
    @task(3)
    def test_home_page(self):
        """Test the home page endpoint."""
        with self.client.get("/", catch_response=True) as response:
            if response.status_code == 200:
                try:
                    data = response.json()
                    if "message" in data:
                        response.success()
                    else:
                        response.failure("Missing message in response")
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
            else:
                response.failure(f"Expected 200, got {response.status_code}")
    
    @task(2)
    def test_health_endpoint(self):
        """Test the health check endpoint."""
        with self.client.get("/health", catch_response=True) as response:
            if response.status_code == 200:
                response.success()
            else:
                response.failure(f"Health check failed: {response.status_code}")
    
    @task(1)
    def test_api_v1_products(self):
        """Test the products API endpoint."""
        with self.client.get("/api/v1/products", catch_response=True) as response:
            if response.status_code in [200, 404]:
                response.success()
            else:
                response.failure(f"Products API failed: {response.status_code}")
    
    @task(1)
    def test_api_v1_inventory(self):
        """Test the inventory API endpoint."""
        with self.client.get("/api/v1/inventory", catch_response=True) as response:
            if response.status_code in [200, 404]:
                response.success()
            else:
                response.failure(f"Inventory API failed: {response.status_code}")


class ProductManagementUser(HttpUser):
    """Simulate product management operations."""
    
    wait_time = between(2, 5)
    
    def on_start(self):
        """Called when a user starts."""
        self.client.verify = False
        self.product_ids = []
    
    @task(2)
    def browse_products(self):
        """Browse products."""
        with self.client.get("/api/v1/products", catch_response=True) as response:
            if response.status_code in [200, 404]:
                response.success()
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if isinstance(data, list):
                            self.product_ids = [p.get('id') for p in data if p.get('id')]
                    except json.JSONDecodeError:
                        pass
            else:
                response.failure(f"Browse products failed: {response.status_code}")
    
    @task(1)
    def create_product(self):
        """Create a new product."""
        product_data = {
            "name": f"Load Test Product {random.randint(1, 1000)}",
            "price": round(random.uniform(10, 100), 2),
            "description": "Generated by load test",
            "category": random.choice(["electronics", "clothing", "books", "home"])
        }
        
        with self.client.post("/api/v1/products", json=product_data, catch_response=True) as response:
            if response.status_code in [200, 201, 404, 422]:
                response.success()
                if response.status_code in [200, 201]:
                    try:
                        data = response.json()
                        if data.get('id'):
                            self.product_ids.append(data['id'])
                    except json.JSONDecodeError:
                        pass
            else:
                response.failure(f"Create product failed: {response.status_code}")
    
    @task(1)
    def get_product_details(self):
        """Get details of a specific product."""
        if self.product_ids:
            product_id = random.choice(self.product_ids)
            with self.client.get(f"/api/v1/products/{product_id}", catch_response=True) as response:
                if response.status_code in [200, 404]:
                    response.success()
                else:
                    response.failure(f"Get product details failed: {response.status_code}")


class AnalyticsUser(HttpUser):
    """Simulate analytics and reporting operations."""
    
    wait_time = between(3, 8)  # Analytics operations might be slower
    
    def on_start(self):
        """Called when a user starts."""
        self.client.verify = False
    
    @task(1)
    def get_inventory_forecast(self):
        """Test inventory forecasting endpoint."""
        with self.client.get("/api/v1/analytics/forecast", catch_response=True) as response:
            if response.status_code in [200, 404, 500]:
                response.success()
            else:
                response.failure(f"Forecast failed: {response.status_code}")
    
    @task(1)
    def get_pricing_recommendations(self):
        """Test pricing recommendations endpoint."""
        with self.client.get("/api/v1/analytics/pricing", catch_response=True) as response:
            if response.status_code in [200, 404, 500]:
                response.success()
            else:
                response.failure(f"Pricing recommendations failed: {response.status_code}")
    
    @task(1)
    def get_sentiment_analysis(self):
        """Test sentiment analysis endpoint."""
        with self.client.get("/api/v1/analytics/sentiment", catch_response=True) as response:
            if response.status_code in [200, 404, 500]:
                response.success()
            else:
                response.failure(f"Sentiment analysis failed: {response.status_code}")


# Configuration for different load test scenarios
if __name__ == "__main__":
    # This allows running the load test directly
    import os
    import subprocess
    
    # Default configuration
    host = os.environ.get("TARGET_HOST", "http://localhost:5000")
    users = int(os.environ.get("LOAD_TEST_USERS", "10"))
    spawn_rate = int(os.environ.get("LOAD_TEST_SPAWN_RATE", "2"))
    duration = os.environ.get("LOAD_TEST_DURATION", "60s")
    
    cmd = [
        "locust",
        "-f", __file__,
        "--headless",
        "--host", host,
        "-u", str(users),
        "-r", str(spawn_rate),
        "-t", duration,
        "--html", "load_test_report.html"
    ]
    
    print(f"Running load test: {' '.join(cmd)}")
    subprocess.run(cmd)
