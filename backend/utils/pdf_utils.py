"""
PDF Utilities for RetailGenie
Handles PDF generation for reports and documents
"""

import logging
from datetime import datetime
from typing import Any, Dict, List
import os

logger = logging.getLogger(__name__)


class PDFUtils:
    """PDF generation utilities for RetailGenie"""
    
    def __init__(self):
        """Initialize PDF utilities"""
        self.reports_dir = "/tmp/reports"
        os.makedirs(self.reports_dir, exist_ok=True)
    
    def generate_feedback_report(self, product_id: str, feedback_data: List[Dict[str, Any]], analysis: Dict[str, Any]) -> str:
        """
        Generate a feedback report as PDF
        
        Args:
            product_id (str): Product ID
            feedback_data (list): List of feedback entries
            analysis (dict): Analysis results
            
        Returns:
            str: Path to generated PDF file
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"feedback_report_{product_id}_{timestamp}.pdf"
            file_path = os.path.join(self.reports_dir, filename)
            
            # For now, create a text-based report instead of PDF
            # In a full implementation, you would use libraries like reportlab or weasyprint
            report_content = self._generate_feedback_report_content(product_id, feedback_data, analysis)
            
            # Write to a text file (can be enhanced to PDF later)
            text_filename = f"feedback_report_{product_id}_{timestamp}.txt"
            text_file_path = os.path.join(self.reports_dir, text_filename)
            
            with open(text_file_path, 'w', encoding='utf-8') as f:
                f.write(report_content)
            
            logger.info(f"Feedback report generated: {text_file_path}")
            return text_file_path
            
        except Exception as e:
            logger.error(f"Error generating feedback report: {str(e)}")
            raise
    
    def _generate_feedback_report_content(self, product_id: str, feedback_data: List[Dict[str, Any]], analysis: Dict[str, Any]) -> str:
        """Generate the content for feedback report"""
        
        content = f"""
RETAILGENIE FEEDBACK REPORT
==========================

Product ID: {product_id}
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

SUMMARY
-------
Total Reviews: {analysis.get('total_reviews', 0)}
Average Rating: {analysis.get('average_rating', 0)}/5.0

DETAILED FEEDBACK
----------------
"""
        
        for i, feedback in enumerate(feedback_data[:10], 1):  # Limit to 10 entries for brevity
            content += f"""
{i}. Rating: {feedback.get('rating', 'N/A')}/5
   Comment: {feedback.get('comment', 'No comment')}
   Date: {feedback.get('timestamp', 'N/A')}
   Customer: {feedback.get('user_id', 'Anonymous')}
"""
        
        if len(feedback_data) > 10:
            content += f"\n... and {len(feedback_data) - 10} more reviews\n"
        
        content += f"""

ANALYSIS INSIGHTS
----------------
{analysis.get('insights', 'No insights available')}

RECOMMENDATIONS
--------------
{analysis.get('recommendations', 'No recommendations available')}

---
Generated by RetailGenie Analytics System
"""
        
        return content
    
    def generate_analytics_report(self, report_type: str, data: Dict[str, Any]) -> str:
        """
        Generate analytics report as PDF
        
        Args:
            report_type (str): Type of report (daily, weekly, monthly)
            data (dict): Report data
            
        Returns:
            str: Path to generated PDF file
        """
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"analytics_report_{report_type}_{timestamp}.txt"
            file_path = os.path.join(self.reports_dir, filename)
            
            content = f"""
RETAILGENIE ANALYTICS REPORT
============================

Report Type: {report_type.upper()}
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

REPORT DATA
-----------
{self._format_dict_for_report(data)}

---
Generated by RetailGenie Analytics System
"""
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"Analytics report generated: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"Error generating analytics report: {str(e)}")
            raise
    
    def _format_dict_for_report(self, data: Dict[str, Any], indent: int = 0) -> str:
        """Format dictionary data for text report"""
        lines = []
        prefix = "  " * indent
        
        for key, value in data.items():
            if isinstance(value, dict):
                lines.append(f"{prefix}{key}:")
                lines.append(self._format_dict_for_report(value, indent + 1))
            elif isinstance(value, list):
                lines.append(f"{prefix}{key}: [{len(value)} items]")
                for i, item in enumerate(value[:3]):  # Show first 3 items
                    if isinstance(item, dict):
                        lines.append(f"{prefix}  {i+1}. {item}")
                    else:
                        lines.append(f"{prefix}  {i+1}. {item}")
                if len(value) > 3:
                    lines.append(f"{prefix}  ... and {len(value) - 3} more")
            else:
                lines.append(f"{prefix}{key}: {value}")
        
        return "\n".join(lines)
